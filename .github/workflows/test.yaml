name: Test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  pre-commit:
    name: Run Pre-commit Hooks
    runs-on: ubuntu-22.04
    permissions:
      checks: write # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      contents: write # for pre-commit-action
    steps:
      - name: Check out repository.
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
      - name: Get operating system name and version.
        id: os
        run: echo "IMAGE=$ImageOS" >>"$GITHUB_OUTPUT"
      - name: Cache Docker images.
        uses: ./
        with:
          key: >
            docker-${{ steps.os.outputs.IMAGE }}-${{
              hashFiles('.pre-commit-config.yaml')
            }}
          read-only: true
      - name: Get Yarn cache directory.
        id: yarn-cache
        run: |
          yarn_cache="$(yarn config get cacheFolder)"
          echo "PATH=$yarn_cache" >>"$GITHUB_OUTPUT"
      - name: Cache Yarn dependencies.
        uses: actions/cache@v3.0.11
        with:
          PATH: ${{ steps.yarn-cache.outputs.PATH }}
          key: >
            yarn-${{ steps.os.outputs.IMAGE }}-${{ hashFiles(
              '**/yarn.lock',
              '.yarnrc.yml'
            ) }}
      - name: Run pre-commit hooks.
        uses: ScribeMD/pre-commit-action@0.9.28
      - name: Publish test results to GitHub.
        uses: EnricoMi/publish-unit-test-result-action@v2.2.0
        if: always()
        with:
          junit_files: |
            reports/jest/junit.xml
            reports/junit/*.xml
          comment_mode: off
  save-cache:
    name: Save Cache
    runs-on: ubuntu-22.04
    permissions: {}
    steps:
      - name: Check out repository.
        uses: actions/checkout@v3.1.0
      - name: Save Docker images.
        uses: ./
        with:
          key: docker-cache-test-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Build an empty test Docker image.
        run: docker build --tag empty .
  restore-cache:
    name: Restore Cache
    needs:
      - save-cache
    runs-on: ubuntu-22.04
    permissions:
      actions: write # for cache deletion
    steps:
      - name: Check out repository.
        uses: actions/checkout@v3.1.0
      - name: Load Docker images.
        uses: ./
        with:
          key: docker-cache-test-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Verify Docker loaded empty image from cache.
        run: |
          description="$(docker inspect --format '{{ index .Config.Labels "description" }}' empty)"
          [[ $description == 'empty image' ]]
      - name: Delete test cache if permitted (i.e., workflow not triggered from fork).
        if: always()
        run: >
          curl
          --fail-with-body
          --silent
          --show-error
          --request DELETE
          --header 'Accept: application/vnd.github.v3+json'
          --header 'Authorization: Bearer ${{ github.token }}'
          "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=docker-cache-test-${{
            github.run_id
          }}-${{
            github.run_attempt
          }}&ref=$GITHUB_REF" ||
          (( $? == 22 ))
  notify:
    name: Notify
    if: always()
    needs:
      - pre-commit
      - save-cache
      - restore-cache
    runs-on: ubuntu-22.04
    permissions: {}
    steps:
      - name: Send Slack notification with workflow result.
        uses: ScribeMD/slack-templates@0.6.12
        with:
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: ${{ secrets.SLACK_ACTIONS_CHANNEL_ID }}
          template: result
          results: "${{ join(needs.*.result, ' ') }}"
